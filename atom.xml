<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello world</title>
  
  <subtitle>2017</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://zm8.github.io/"/>
  <updated>2017-09-30T07:05:19.000Z</updated>
  <id>https://zm8.github.io/</id>
  
  <author>
    <name>zhengming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rxjs Marble Diagrams</title>
    <link href="https://zm8.github.io/2017/09/28/Rxjs%20Marble%20Diagrams/"/>
    <id>https://zm8.github.io/2017/09/28/Rxjs Marble Diagrams/</id>
    <published>2017-09-28T04:57:00.000Z</published>
    <updated>2017-09-30T07:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>我們用 - 來表達一小段時間，這些 - 串起就代表一個 observable。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">----------------</div></pre></td></tr></table></figure></p><p><code>X</code> (大寫 X)則代表有錯誤發生<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---------------X</div></pre></td></tr></table></figure></p><p><code>|</code> 則代表 observable 結束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">----------------|</div></pre></td></tr></table></figure></p><h4 id="1-of"><a href="#1-of" class="headerlink" title="1. of"></a>1. of</h4><p>observable 是同步送值的時候, 小括號代表著同步發生。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(1234)|</div></pre></td></tr></table></figure><h4 id="2-interval"><a href="#2-interval" class="headerlink" title="2. interval"></a>2. interval</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-----0-----1-----2-----3--...</div></pre></td></tr></table></figure><h4 id="3-map"><a href="#3-map" class="headerlink" title="3. map"></a>3. map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> newest = source.map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>); </div><div class="line">newest.subscribe(<span class="built_in">console</span>.log);</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5..</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source: -----0-----1-----2-----3--...</div><div class="line">            map(x =&gt; x + 1)</div><div class="line">newest: -----1-----2-----3-----4--...</div></pre></td></tr></table></figure><h4 id="4-mapTo"><a href="#4-mapTo" class="headerlink" title="4. mapTo"></a>4. mapTo</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> newest = source.mapTo(<span class="number">2</span>); </div><div class="line">newest.subscribe(<span class="built_in">console</span>.log);</div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 2..</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source: -----0-----1-----2-----3--...</div><div class="line">                mapTo(2)</div><div class="line">newest: -----2-----2-----2-----2--...</div></pre></td></tr></table></figure><h4 id="5-filter"><a href="#5-filter" class="headerlink" title="5. filter"></a>5. filter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> newest = source.filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>); </div><div class="line"></div><div class="line">newest.subscribe(<span class="built_in">console</span>.log);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 6..</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source: -----0-----1-----2-----3-----4-...</div><div class="line">            filter(x =&gt; x % 2 === 0)</div><div class="line">newest: -----0-----------2-----------4-...</div></pre></td></tr></table></figure><h4 id="6-take"><a href="#6-take" class="headerlink" title="6. take"></a>6. take</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> example = source.take(<span class="number">3</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : -----0-----1-----2-----3--..</div><div class="line">                take(3)</div><div class="line">example: -----0-----1-----2|</div></pre></td></tr></table></figure><h4 id="7-first"><a href="#7-first" class="headerlink" title="7. first"></a>7. first</h4><p>和 take(1)一致<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> example = source.first();</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : -----0-----1-----2-----3--..</div><div class="line">                first()</div><div class="line">example: -----0|</div></pre></td></tr></table></figure><h4 id="8-takeLast"><a href="#8-takeLast" class="headerlink" title="8. takeLast"></a>8. takeLast</h4><p>takeLast 必須等到整個 observable 完成(complete)，才能知道最後的元素有哪些，並且同步送出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.takeLast(<span class="number">2</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2----3----4----5|</div><div class="line">                takeLast(2)</div><div class="line">example: ------------------------------(45)|</div></pre></td></tr></table></figure><h4 id="9-last"><a href="#9-last" class="headerlink" title="9. last"></a>9. last</h4><p>相当于 takeLast(1)，用來取得最後一個元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.last();</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2----3----4----5|</div><div class="line">                    last()</div><div class="line">example: ------------------------------(5)|</div></pre></td></tr></table></figure><h4 id="10-takeUntil"><a href="#10-takeUntil" class="headerlink" title="10. takeUntil"></a>10. takeUntil</h4><p>當 takeUntil 傳入的 observable 發送值時，原本的 observable 就會直接進入完成(complete)的狀態，並且發送完成訊息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> example = source.takeUntil(click);     </div><div class="line">   </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// complete (點擊body了)</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : -----0-----1-----2------3--</div><div class="line">click  : ----------------------c----</div><div class="line">                takeUntil(click)</div><div class="line">example: -----0-----1-----2----|</div></pre></td></tr></table></figure><h4 id="11-concat"><a href="#11-concat" class="headerlink" title="11. concat"></a>11. concat</h4><p><code>concat</code> 可以把多個 observable 實例合併成一個<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.of(<span class="number">3</span>)</div><div class="line"><span class="keyword">var</span> source3 = Rx.Observable.of(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line"><span class="keyword">var</span> example = source.concat(source2, source3);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2|</div><div class="line">source2: (3)|</div><div class="line">source3: (456)|</div><div class="line">            concat()</div><div class="line">example: ----0----1----2(3456)|</div></pre></td></tr></table></figure><p>另外 concat 還可以當作靜態方法使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.of(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source3 = Rx.Observable.of(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = Rx.Observable.concat(source, source2, source3);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h4 id="12-concatAll"><a href="#12-concatAll" class="headerlink" title="12. concatAll"></a>12. concatAll</h4><p>Observable 送出的元素又是一個 observable，就像是二維陣列，陣列裡面的元素是陣列，可以用 <code>concatAll</code> 把它攤平成一維陣列. 把二维阵列变成维.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> source = click.map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.concatAll();</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">click  : ------c------------c--------</div><div class="line"></div><div class="line">        map(e =&gt; Rx.Observable.of(1,2,3))</div><div class="line"></div><div class="line">source : ------o------------o--------</div><div class="line">                \            \</div><div class="line">                 (123)|       (123)|</div><div class="line"></div><div class="line">                   concatAll()</div><div class="line"></div><div class="line">example: ------(123)--------(123)------------</div></pre></td></tr></table></figure><p>這裡需要注意的是 <code>concatAll</code> 會處理 source 先發出來的 observable，必須等到這個 observable 結束，才會再處理下一個 source 發出來的 observable。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obs1 = Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> obs2 = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> obs3 = Rx.Observable.interval(<span class="number">2000</span>).take(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> source = Rx.Observable.of(obs1, obs2, obs3);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.concatAll();</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">source : (o1                 o2      o3)|</div><div class="line">           \                  \       \</div><div class="line">            --0--1--2--3--4|   -0-1|   ----0|</div><div class="line">                </div><div class="line">                concatAll()        </div><div class="line"></div><div class="line">example: --0--1--2--3--4-0-1----0|</div></pre></td></tr></table></figure><h4 id="13-skip"><a href="#13-skip" class="headerlink" title="13. skip"></a>13. skip</h4><p>原本從 0 開始的就會變成從 3 開始，<b>但是記得原本元素的等待時間仍然存在</b>，也就是說此範例第一個取得的元素需要等 4 秒，用 Marble Diagram 表示如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> example = source.skip(<span class="number">3</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5...</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2----3----4----5--....</div><div class="line">                    skip(3)</div><div class="line">example: -------------------3----4----5--...</div></pre></td></tr></table></figure><h4 id="14-startWith"><a href="#14-startWith" class="headerlink" title="14. startWith"></a>14. startWith</h4><p><code>startWith</code> 的值是一開始就同步發出的，這個 operator 很常被用來保存程式的起始狀態！<br>下面的例子，不会过1秒才出现<code>0</code>，而是马上出现<code>0</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> example = source.startWith(<span class="number">0</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0 马上发出</span></div><div class="line"><span class="comment">// 0 过1秒</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3...</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2----3--...</div><div class="line">                startWith(0)</div><div class="line">example: (0)----0----1----2----3--...</div></pre></td></tr></table></figure><h4 id="15-merge"><a href="#15-merge" class="headerlink" title="15. merge"></a>15. merge</h4><p><code>merge</code> 把多個 observable 同時處理，這跟 <code>concat</code> 一次處理一個 observable 是完全不一樣的.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"><span class="keyword">var</span> example = source.merge(source2);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2|</div><div class="line">source2: --0--1--2--3--4--5|</div><div class="line">            merge()</div><div class="line">example: --0-01--21-3--(24)--5|</div></pre></td></tr></table></figure><p><b style="color: red">這很常用在一個以上的按鈕具有部分相同的行為。</b><br>例如一個影片播放器有兩個按鈕，一個是暫停(II)，另一個是結束播放(口)。這兩個按鈕都具有相同的行為就是影片會被停止，只是結束播放會讓影片回到 00 秒，這時我們就可以把這兩個按鈕的事件 merge 起來處理影片暫停這件事。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stopVideo = Rx.Observable.merge(stopButton, endButton);</div><div class="line"></div><div class="line">stopVideo.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 暫停播放影片</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>非同步最難的地方在於，當有多個非同步行為同時觸發且相互依賴，這時候我們要處理的邏輯跟狀態就會變得極其複雜.<br><b>它們都是在多個元素送進來時，只輸出一個新元素.</b></p><h4 id="16-combineLatest"><a href="#16-combineLatest" class="headerlink" title="16. combineLatest"></a>16. combineLatest</h4><p>它會取得各個 observable 最後送出的值，再輸出成一個值.<br><b style="color:red">描述:</b></p><pre><code>1. newest 和 source 其中一个送出值的时候2. 和另外一个最新送出的值3. 传入callback4. 当newest 和 source 都结束了, 才会complete</code></pre><p><b style="color:red">例子流程:</b></p><pre><code>*   newest 送出了 `0`，source 没有送出，不會執行 callback*   source 送出了 `0`，newest 送出`0`，callback 等于 `0`*   newest 送出了 `1`，source 送出 `0`，callback 等于 `1`........................*   newest 和 source 都結束了，complete</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> newest = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.combineLatest(newest, (x, y) =&gt; x + y);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// 7</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2|</div><div class="line">newest : --0--1--2--3--4--5|</div><div class="line"></div><div class="line">    combineLatest(newest, (x, y) =&gt; x + y);</div><div class="line"></div><div class="line">example: ----01--23-4--(56)--7|</div></pre></td></tr></table></figure><p><b style="color:red">应用:</b><br>combineLatest 很常用在運算多個因子的結果;<br>A 和 B的值求出C, A 变化, 则C变化; B变化, 则C也变化</p><h4 id="17-zip"><a href="#17-zip" class="headerlink" title="17. zip"></a>17. zip</h4><p><b style="color:red">描述:</b></p><pre><code>1. newest 和 source 其中一个送出值的时候2. 若当前另1个同位置有值3. 传入callback4. 任意1个结束, 就会complete</code></pre><p><b>例子流程:</b></p><ul><li>newest 送出了 <code>0</code>，source没有送出，不會執行 callback</li><li>source 送出了 <code>0</code>，newest送出<code>0</code>，callback 等于 <code>0</code><br>….. 一直不执行callback</li><li>source 送出了 <code>1</code>，newest虽然现在最新的是<code>2</code>，但是之前送出的是 <code>1</code>，callback等于<code>2(1+1)</code><br>….. 一直不执行callback</li><li>source 送出了 <code>2</code>，newest之前送出的是 <code>2</code>， callback 等于 <code>4</code></li><li>source 結束 example 就結束，因為 source 跟 newest 不會再有對應位置的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">500</span>).take(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> newest = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.zip(newest, (x, y) =&gt; x + y);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : ----0----1----2|</div><div class="line">newest : --0--1--2--3--4--5|</div><div class="line">    zip(newest, (x, y) =&gt; x + y)</div><div class="line">example: ----0----2----4|</div></pre></td></tr></table></figure><p><b style="color:red">应用:</b></p><p>zip 适用原本只能同步送出的資料變成了非同步的, 常拿來做 demo 使用，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.from(<span class="string">'hello'</span>);</div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.zip(source2, (x, y) =&gt; x);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : (hello)|</div><div class="line">source2: -0-1-2-3-4-...</div><div class="line">        zip(source2, (x, y) =&gt; x)</div><div class="line">example: -h-e-l-l-o|</div></pre></td></tr></table></figure><h4 id="18-withLatestFrom"><a href="#18-withLatestFrom" class="headerlink" title="18. withLatestFrom"></a>18. withLatestFrom</h4><p>withLatestFrom 運作方式跟 combineLatest 有點像，只是他有主從的關係，只有在主要的 observable 送出新的值時，才會執行 callback，附隨的 observable 只是在背景下運作<br><b style="color:red">描述:</b></p><pre><code>1. main 送出值的时候2. 和另外一个最新送出的值3. 传入callback4. main结束时, 就会complete</code></pre><p><b>例子流程:</b></p><ul><li>main 送出了 <code>h</code>，some 上一次送出的值為 <code>0</code>，callback 得到 <code>h</code>。</li><li>main 送出了 <code>e</code>，some 上一次送出的值為 0，callback 得到 <code>e</code>。</li><li>main 送出了 <code>l</code>，some 上一次送出的值為 0，callback 得到 <code>l</code>。</li><li>main 送出了 <code>l</code>，some 上一次送出的值為 1，callback 得到 <code>L</code>。</li><li>main 送出了 <code>o</code>，some 上一次送出的值為 1，callback 得到 <code>O</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> main = Rx.Observable.from(<span class="string">'hello'</span>).zip(Rx.Observable.interval(<span class="number">500</span>), (x, y) =&gt; x);</div><div class="line"><span class="keyword">var</span> some = Rx.Observable.from([<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]).zip(Rx.Observable.interval(<span class="number">300</span>), (x, y) =&gt; x);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = main.withLatestFrom(some, (x, y) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> y === <span class="number">1</span> ? x.toUpperCase() : x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">main   : ----h----e----l----l----o|</div><div class="line">some   : --0--1--0--0--0--1|</div><div class="line"></div><div class="line">withLatestFrom(some, (x, y) =&gt;  y === 1 ? x.toUpperCase() : x);</div><div class="line"></div><div class="line">example: ----h----e----l----L----O|</div></pre></td></tr></table></figure><p><b style="color:red">应用:</b><br>withLatestFrom 很常用在一些 checkbox 型的功能，例如說一個編輯器，我們開啟粗體後，打出來的字就都要變粗體，粗體就像是 some observable，而我們打字就是 main observable。</p><h4 id="19-scan"><a href="#19-scan" class="headerlink" title="19. scan"></a>19. scan</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.from(<span class="string">'hello'</span>)</div><div class="line">             .zip(Rx.Observable.interval(<span class="number">600</span>), (x, y) =&gt; x);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.scan(<span class="function">(<span class="params">origin, next</span>) =&gt;</span> origin + next, <span class="string">''</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// h</span></div><div class="line"><span class="comment">// he</span></div><div class="line"><span class="comment">// hel</span></div><div class="line"><span class="comment">// hell</span></div><div class="line"><span class="comment">// hello</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ----h----e----l----l----o|</div><div class="line">    scan((origin, next) =&gt; origin + next, &apos;&apos;)</div><div class="line">example: ----h----(he)----(hel)----(hell)----(hello)|</div></pre></td></tr></table></figure><p>scan 很常用在狀態的計算處理，最簡單的就是對一個數字的加減，我們可以綁定一個 button 的 click 事件，並用 map 把 click event 轉成 1，之後送處 scan 計算值再做顯示。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> addButton = <span class="built_in">document</span>.getElementById(<span class="string">'addButton'</span>);</div><div class="line"><span class="keyword">const</span> minusButton = <span class="built_in">document</span>.getElementById(<span class="string">'minusButton'</span>);</div><div class="line"><span class="keyword">const</span> state = <span class="built_in">document</span>.getElementById(<span class="string">'state'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> addClick = Rx.Observable.fromEvent(addButton, <span class="string">'click'</span>).mapTo(<span class="number">1</span>);</div><div class="line"><span class="keyword">const</span> minusClick = Rx.Observable.fromEvent(minusButton, <span class="string">'click'</span>).mapTo(<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> numberState = Rx.Observable.empty()</div><div class="line">  .startWith(<span class="number">0</span>)</div><div class="line">  .merge(addClick, minusClick)</div><div class="line">  .scan(<span class="function">(<span class="params">origin, next</span>) =&gt;</span> origin + next, <span class="number">0</span>)</div><div class="line">  </div><div class="line">numberState</div><div class="line">  .subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; state.innerHTML = value;&#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><h4 id="20-buffer"><a href="#20-buffer" class="headerlink" title="20. buffer"></a>20. buffer</h4><p>5个相关的operator</p><ul><li>buffer</li><li>bufferCount</li><li>bufferTime</li><li>bufferToggle</li><li>bufferWhen</li></ul><p>buffer 要傳入一個 observable(source2)，它會把原本的 observable (source)送出的元素緩存在陣列中，等到傳入的 observable(source2) 送出元素時，就會觸發把緩存的元素送出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>);</div><div class="line"> <span class="comment">/*</span></div><div class="line"><span class="comment">    相当于</span></div><div class="line"><span class="comment">    var source2 = source.bufferTime(1000);</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> source2 = Rx.Observable.interval(<span class="number">1000</span>);</div><div class="line"><span class="keyword">var</span> example = source.buffer(source2);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [0,1,2]</span></div><div class="line"><span class="comment">// [3,4,5]</span></div><div class="line"><span class="comment">// [6,7,8]...</span></div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">source : --0--1--2--3--4--5--6--7..</div><div class="line">source2: ---------0---------1--------...</div><div class="line">            buffer(source2)</div><div class="line">example: ---------([0,1,2])---------([3,4,5])</div></pre></td></tr></table></figure><p>除了用時間來作緩存外，我們更常用數量來做緩存，範例如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>);</div><div class="line"><span class="keyword">var</span> example = source.bufferCount(<span class="number">3</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// [0,1,2]</span></div><div class="line"><span class="comment">// [3,4,5]</span></div><div class="line"><span class="comment">// [6,7,8]...</span></div></pre></td></tr></table></figure></p><p>可以用 buffer 來做某個事件的過濾，例如像是滑鼠連點才能真的執行，<br>這裡我們只有在 500 毫秒內連點兩下，才能成功印出 ‘success’，<br>這個功能在某些特殊的需求中非常的好用，也能用在批次處理來降低 request 傳送的次數！<br>代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</div><div class="line"><span class="keyword">const</span> click = Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</div><div class="line"><span class="keyword">const</span> example = click</div><div class="line">                .bufferTime(<span class="number">500</span>)</div><div class="line">                .filter(<span class="function"><span class="params">arr</span> =&gt;</span> arr.length &gt;= <span class="number">2</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'success'</span>); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h4 id="21-delay"><a href="#21-delay" class="headerlink" title="21. delay"></a>21. delay</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.delay(<span class="number">500</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 4</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : --0--1--2--3--4|</div><div class="line">        delay(500)</div><div class="line">example: -------0--1--2--3--4|</div></pre></td></tr></table></figure><p>delay 除了可以傳入毫秒以外，也可以傳入 Date 型別的資料<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.delay(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">1000</span>));</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h4 id="22-delayWhen"><a href="#22-delayWhen" class="headerlink" title="22. delayWhen"></a>22. delayWhen</h4><p><code>delayWhen</code> 可以影響每個元素，而且需要傳一個 callback 並回傳一個 observable<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">              .delayWhen(</div><div class="line">                  x =&gt; Rx.Observable.empty().delay(<span class="number">100</span> * x * x)</div><div class="line">              );</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : --0--1--2--3--4|</div><div class="line">    .delayWhen(x =&gt; Rx.Observable.empty().delay(100 * x * x));</div><div class="line">example: --0---1----2-----3-----4|</div></pre></td></tr></table></figure><h4 id="23-debounce"><a href="#23-debounce" class="headerlink" title="23. debounce"></a>23. debounce</h4><p>debounce 跟 debounceTime 一個是傳入 observable 另一個則是傳入毫秒，比較常用到的是 debounceTime<br><b style="color:red">描述:</b></p><ol><li>每次收到元素，等待1000毫秒</li><li>若1000毫秒内没有元素送出, 则把最新收到的元素送出; 若1000毫秒内收到新的元素, 重新等待1000毫秒.</li><li>注意若是<span style="color:red">最后一个元素</span>, 则不需要等待 1000 毫秒, 直接送出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">300</span>).take(<span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> example = source.debounceTime(<span class="number">1000</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : --0--1--2--3--4|</div><div class="line">        debounceTime(1000)</div><div class="line">example: --------------4|</div></pre></td></tr></table></figure><p>具体例子, 自動傳送使用者打的字到後端:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> searchInput = <span class="built_in">document</span>.getElementById(<span class="string">'searchInput'</span>);</div><div class="line"><span class="keyword">const</span> theRequestValue = <span class="built_in">document</span>.getElementById(<span class="string">'theRequestValue'</span>);</div><div class="line"></div><div class="line">Rx.Observable.fromEvent(searchInput, <span class="string">'input'</span>)</div><div class="line">  .debounceTime(<span class="number">300</span>)</div><div class="line">  .map(<span class="function"><span class="params">e</span> =&gt;</span> e.target.value)</div><div class="line">  .subscribe(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">    theRequestValue.textContent = value;</div><div class="line">    <span class="comment">// 在這裡發 request</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p><h4 id="24-throttle"><a href="#24-throttle" class="headerlink" title="24. throttle"></a>24. throttle</h4><p><b style="color:red">描述:</b></p><ol><li>第1次收到元素先送出,</li><li>1000毫秒以内处于关闭状态, 1000毫秒后, 若收到元素, 则送出</li><li>最后1个元素不一定会送出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.interval(<span class="number">400</span>).take(<span class="number">8</span>);</div><div class="line"><span class="keyword">var</span> example = source.throttleTime(<span class="number">1000</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"><span class="comment">// 6</span></div><div class="line"><span class="comment">// complete</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : ---0---1---2---3---4---5---6---7|</div><div class="line">        throttleTime(1000)</div><div class="line">example: ---0-----------3-----------6----|</div></pre></td></tr></table></figure><p>下面要说3个处理 <code>Higher Order Observable</code>. 所謂的 Higher Order Observable 就是指一個 Observable 送出的元素還是一個 Observable，就像是二維陣列一樣，一個陣列中的每個元素都是陣列。<br>一共有3个方法:</p><ul><li>concatAll</li><li>mergeAll</li><li>switch</li></ul><h4 id="25-concatAll"><a href="#25-concatAll" class="headerlink" title="25. concatAll"></a>25. concatAll</h4><p>concatAll 會一個一個處理，一定是等前一個 observable 完成(complete)才會處理下一個 observable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> source = click.map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.concatAll();</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">click  : ---------c-c------------------c--.. </div><div class="line">        map(e =&gt; Rx.Observable.interval(1000))</div><div class="line">source : ---------o-o------------------o--..</div><div class="line">                   \ \                  \</div><div class="line">                    \ ----0----1----2|   ----0----1----2|</div><div class="line">                     ----0----1----2|</div><div class="line">                     concatAll()</div><div class="line">example: ----------------0----1----2----0----1----2--..</div></pre></td></tr></table></figure><h4 id="26-switch"><a href="#26-switch" class="headerlink" title="26. switch"></a>26. switch</h4><p>当有新的 observable 来的时候, 就会把旧的退訂, 永远只处理新的 observable.<br>下面的例子, 当第2次点击的时候，<code>由于第2个observable和第1个时间小于1秒</code>，所以第1个就被退订了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> source = click.map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.switch();</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">click  : ---------c-c------------------c--.. </div><div class="line">        map(e =&gt; Rx.Observable.interval(1000))</div><div class="line">source : ---------o-o------------------o--..</div><div class="line">                   \ \                  \----0----1--...</div><div class="line">                    \ ----0----1----2----3----4--...</div><div class="line">                     ----0----1----2----3----4--...</div><div class="line">                     switch()</div><div class="line">example: -----------------0----1----2--------0----1--...</div></pre></td></tr></table></figure><h4 id="27-mergeAll"><a href="#27-mergeAll" class="headerlink" title="27. mergeAll"></a>27. mergeAll</h4><p>它會把二維的 observable 轉成一維的，並且能夠同時處理所有的 observable。<br><b style="color:red">若传入的参数是1, 则和concatAll是一摸一样的</b><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> source = click.map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.mergeAll();</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">click  : ---------c-c------------------c--.. </div><div class="line">        map(e =&gt; Rx.Observable.interval(1000))</div><div class="line">source : ---------o-o------------------o--..</div><div class="line">                   \ \                  \----0----1--...</div><div class="line">                    \ ----0----1----2----3----4--...</div><div class="line">                     ----0----1----2----3----4--...</div><div class="line">                     switch()</div><div class="line">example: ----------------00---11---22---33---(04)4--...</div></pre></td></tr></table></figure><p>另外 mergeAll 可以傳入一個數值，這個數值代表他可以同時處理的 observable 數量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> click = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"><span class="keyword">var</span> source = click.map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.mergeAll(<span class="number">2</span>);</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">click  : ---------c-c----------o----------.. </div><div class="line">        map(e =&gt; Rx.Observable.interval(1000))</div><div class="line">source : ---------o-o----------c----------..</div><div class="line">                   \ \          \----0----1----2|     </div><div class="line">                    \ ----0----1----2|  </div><div class="line">                     ----0----1----2|</div><div class="line">                     mergeAll(2)</div><div class="line">example: ----------------00---11---22---0----1----2--..</div></pre></td></tr></table></figure><h4 id="28-concatMap"><a href="#28-concatMap" class="headerlink" title="28. concatMap"></a>28. concatMap</h4><p>concatMap= map+concatAll<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>))</div><div class="line">                .concatAll();</div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .concatMap(</div><div class="line">                    e =&gt; Rx.Observable.interval(<span class="number">100</span>).take(<span class="number">3</span>)</div><div class="line">                );                </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>Marble Diagram:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : -----------c--c------------------...</div><div class="line">        concatMap(c =&gt; Rx.Observable.interval(100).take(3))</div><div class="line">example: -------------0-1-2-0-1-2---------...</div></pre></td></tr></table></figure></p><p>常用于發送 request 如下, <font color="red">每一個 request 會等前一個 request 完成才做處理。</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPostData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.concatMap(</div><div class="line">                    e =&gt; Rx.Observable.from(getPostData()));</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>concatMap 還有第二個參數是一個 selector callback，這個 callback 會傳入四個參數，分別是:</p><ol><li>外部 observable 送出的元素</li><li>內部 observable 送出的元素</li><li>外部 observable 送出元素的 index</li><li>內部 observable 送出元素的 index</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPostData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.concatMap(</div><div class="line">                e =&gt; Rx.Observable.from(getPostData()), </div><div class="line">                (e, res, eIndex, resIndex) =&gt; res.title);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="29-switchMap"><a href="#29-switchMap" class="headerlink" title="29. switchMap"></a>29. switchMap</h4><p>switchMap = map+switch<br>switchMap 跟 concatMap 一樣有第二個參數 selector callback 可用來回傳我們要的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>))</div><div class="line">                .switch();</div><div class="line">                </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>相当于:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .switchMap(</div><div class="line">                    e =&gt; Rx.Observable.interval(<span class="number">100</span>).take(<span class="number">3</span>)</div><div class="line">                );</div><div class="line">                </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>Marble Diagram:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : -----------c--c-----------------...</div><div class="line">        concatMap(<span class="function"><span class="params">c</span> =&gt;</span> Rx.Observable.interval(<span class="number">100</span>).take(<span class="number">3</span>))</div><div class="line">example: ------------<span class="number">-0</span>-<span class="number">-0</span><span class="number">-1</span><span class="number">-2</span>-----------...</div></pre></td></tr></table></figure></p><p><code>switchMap</code> 用在HTTP request, 雖然我們發送了多個 request 但最後真正印出來的 log 只會有一個<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPostData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.switchMap(</div><div class="line">                    e =&gt; Rx.Observable.from(getPostData()));</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h4 id="30-mergeMap"><a href="#30-mergeMap" class="headerlink" title="30. mergeMap"></a>30. mergeMap</h4><p>mergeMap = map + mergeAll<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .map(<span class="function"><span class="params">e</span> =&gt;</span> Rx.Observable.interval(<span class="number">1000</span>).take(<span class="number">3</span>))</div><div class="line">                .mergeAll();</div><div class="line">                </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>相当于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source</div><div class="line">                .mergeMap(</div><div class="line">                    e =&gt; Rx.Observable.interval(<span class="number">100</span>).take(<span class="number">3</span>)</div><div class="line">                );</div><div class="line">                </div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>Marble Diagram:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source : -----------c-c------------------...</div><div class="line">        concatMap(c =&gt; Rx.Observable.interval(100).take(3))</div><div class="line">example: -------------0-(10)-(21)-2----------...</div></pre></td></tr></table></figure></p><p>mergeMap 也能傳入第2個參數和concatMap是一样的，但 mergeMap传入第3个参数限制并行数量<br>(<code>限制但是不是阻止的意思</code>)<br>下面的例子，若连续点击4下，第4个HTTP request需要等第1个结束以后才可以发送<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPostData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> example = source.mergeMap(</div><div class="line">                e =&gt; Rx.Observable.from(getPostData()), </div><div class="line">                (e, res, eIndex, resIndex) =&gt; res.title, <span class="number">3</span>);</div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><b>switchMap, mergeMap, concatMap 相同和不同的地方</b><br>共同的特性: 可以把第一個參數所回傳的 promise 物件直接轉成 observable<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> fetch(<span class="string">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> source = Rx.Observable.fromEvent(<span class="built_in">document</span>.body, <span class="string">'click'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 不需要写成 </span></div><div class="line"><span class="comment">// var example = source.concatMap(e =&gt; Rx.Observable.from(getPersonData()));</span></div><div class="line"><span class="keyword">var</span> example = source.concatMap(<span class="function"><span class="params">e</span> =&gt;</span> getPersonData());</div><div class="line">                                    <span class="comment">//直接回傳 promise 物件</span></div><div class="line"></div><div class="line">example.subscribe(&#123;</div><div class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(value); &#125;,</div><div class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err); &#125;,</div><div class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'complete'</span>); &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa"><a href="#11111-aaaaaa" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-1"><a href="#11111-aaaaaa-1" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-2"><a href="#11111-aaaaaa-2" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-3"><a href="#11111-aaaaaa-3" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-4"><a href="#11111-aaaaaa-4" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-5"><a href="#11111-aaaaaa-5" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-6"><a href="#11111-aaaaaa-6" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><h4 id="11111-aaaaaa-7"><a href="#11111-aaaaaa-7" class="headerlink" title="11111. aaaaaa"></a>11111. aaaaaa</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbbbbb</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我們用 - 來表達一小段時間，這些 - 串起就代表一個 observable。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/
      
    
    </summary>
    
      <category term="rxjs" scheme="https://zm8.github.io/categories/rxjs/"/>
    
    
      <category term="rxjs" scheme="https://zm8.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>BlueLake博客主题的详细配置(转)</title>
    <link href="https://zm8.github.io/2017/09/28/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE(%E8%BD%AC)/"/>
    <id>https://zm8.github.io/2017/09/28/BlueLake博客主题的详细配置(转)/</id>
    <published>2017-09-27T23:24:00.000Z</published>
    <updated>2017-09-28T05:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="external"><b style="color:red">原文链接</b></a></p><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p><a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="external">BlueLake主题</a>写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong><code>根_config.yml</code></strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong><code>主题_config.yml</code></strong>。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="external">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p><h4 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h4><p>在根目录下打开终端窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</div></pre></td></tr></table></figure></p><h4 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-renderer-jade@0.3.0 --save</div><div class="line">$ npm install hexo-renderer-stylus --save</div></pre></td></tr></table></figure></p><h4 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">theme:</span> <span class="string">BlueLake</span></div></pre></td></tr></table></figure></p><h4 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h4 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/BlueLake</div><div class="line">git pull</div></pre></td></tr></table></figure></p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> </div><div class="line"><span class="attr">subtitle:</span> </div><div class="line"><span class="attr">description:</span> </div><div class="line"><span class="attr">author:</span></div></pre></td></tr></table></figure></p><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h4 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure></p><h4 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">home</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">.</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-home</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">archive</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">archives/</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-archive</span></div><div class="line">  <span class="comment"># - page: about</span></div><div class="line">  <span class="comment">#   directory: about/</span></div><div class="line">  <span class="comment">#   icon: fa-user</span></div><div class="line"><span class="attr">  - page:</span> <span class="string">rss</span></div><div class="line"><span class="attr">    directory:</span> <span class="string">atom.xml</span></div><div class="line"><span class="attr">    icon:</span> <span class="string">fa-rss</span></div></pre></td></tr></table></figure></p><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># About page </span></div><div class="line"><span class="attr">about:</span></div><div class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></div><div class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></div><div class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></div></pre></td></tr></table></figure></p><h5 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">'about'</span></div></pre></td></tr></table></figure></p><p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># About page </span></div><div class="line"><span class="attr">about:</span></div><div class="line"><span class="attr">  photo_url:</span> <span class="comment">## 头像的链接地址</span></div><div class="line"><span class="attr">  email:</span> <span class="comment">## 个人邮箱 </span></div><div class="line"><span class="attr">  weibo_url:</span> <span class="comment">## 微博主页链接地址</span></div><div class="line"><span class="attr">  weibo_name:</span> <span class="comment">## 微博用户名 </span></div><div class="line"><span class="attr">  github_url:</span> <span class="comment">## github主页链接地址</span></div><div class="line"><span class="attr">  github_name:</span> <span class="comment">## github用户名</span></div></pre></td></tr></table></figure></p><p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p><h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div><div class="line">$ npm install hexo-generator-sitemap --save</div><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p><p>添加<code>主题_config.yml</code>配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">Plugins:</span></div><div class="line">  <span class="string">hexo-generator-feed</span></div><div class="line">  <span class="string">hexo-generator-sitemap</span></div><div class="line">  <span class="string">hexo-generator-baidu-sitemap</span></div><div class="line"></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">atom</span></div><div class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></div><div class="line"><span class="attr">  limit:</span> <span class="number">20</span></div><div class="line"></div><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">sitemap.xml</span></div><div class="line"><span class="attr">baidusitemap:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">baidusitemap.xml</span></div></pre></td></tr></table></figure></p><h4 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="external">hexo-generator-json-content</a>来创建JSON数据文件：<br><figure class="highlight bash"><figcaption><span>git bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content@2.2.0 --save</div></pre></td></tr></table></figure></p><p>然后在<code>根_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  pages:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    raw:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p><p>最后在<code>主题_config.yml</code>添加配置：<br><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">local_search:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></p><h4 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为<strong> favicon.ico </strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为<strong> apple-touch-icon.png </strong>的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h4 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：<br><figure class="highlight yml"><figcaption><span>根_config.yml</span><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> <span class="string">Hexo</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></div><div class="line"><span class="attr">description:</span> <span class="string">网站简要描述,如：Charles·Zheng's</span> <span class="string">blog.</span></div><div class="line"><span class="attr">keywords:</span> <span class="string">网站关键字,</span> <span class="string">key,</span> <span class="string">key1,</span> <span class="string">key2,</span> <span class="string">key3</span></div><div class="line"><span class="attr">author:</span> <span class="string">Charles</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div></pre></td></tr></table></figure></p><h4 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p><ol><li><code>show_category_count</code>——是否显示分类下的文章数。</li><li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> </div><div class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">true</span></div></pre></td></tr></table></figure></li></ol><h3 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h3><h4 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com" target="_blank" rel="external">多说评论</a>、<a href="https://disqus.com" target="_blank" rel="external">Disqus评论</a>、<a href="https://livere.com" target="_blank" rel="external">来必力评论</a>、<a href="http://www.uyan.cc/" target="_blank" rel="external">友言评论</a>、<a href="https://gentie.163.com/info.html" target="_blank" rel="external">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com" target="_blank" rel="external">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p><ol><li>注册并获得代码。<ul><li>若使用<a href="http://duoshuo.com" target="_blank" rel="external">多说评论</a>，注册多说后获得short_name。</li><li>若使用<a href="https://disqus.com" target="_blank" rel="external">Disqus评论</a>，注册Disqus后获得short_name。</li><li>若使用<a href="https://livere.com" target="_blank" rel="external">来必力评论</a>，注册来必力,获得data-uid。</li><li>若使用<a href="http://www.uyan.cc/" target="_blank" rel="external">友言评论</a>，注册友言,获得uid。</li><li>若使用<a href="https://gentie.163.com/info.html" target="_blank" rel="external">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li><li>若使用<a href="http://changyan.kuaizhan.com" target="_blank" rel="external">畅言评论</a>，注册畅言，获得appid，appkey。</li></ul></li><li>配置<code>主题_config.yml</code>：<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Cmments</span></div><div class="line"><span class="attr">comment:</span></div><div class="line"><span class="attr">  duoshuo:</span> <span class="comment">## duoshuo_shortname</span></div><div class="line"><span class="attr">  disqus:</span> <span class="comment">## disqus_shortname</span></div><div class="line"><span class="attr">  livere:</span> <span class="comment">## 来必力(data-uid)</span></div><div class="line"><span class="attr">  uyan:</span> <span class="comment">## 友言(uid)</span></div><div class="line"><span class="attr">  cloudTie:</span> <span class="comment">## 网易云跟帖(productKey)</span></div><div class="line"><span class="attr">  changyan:</span> <span class="comment">## 畅言需在下方配置两个参数，此处不填。</span></div><div class="line"><span class="attr">    appid:</span> <span class="comment">## 畅言(appid)</span></div><div class="line"><span class="attr">    appkey:</span> <span class="comment">##畅言(appkey)</span></div></pre></td></tr></table></figure></li></ol><h4 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h4><ol><li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>，定位到站点的代码获取页面。</li><li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li><li>配置<code>主题_config.yml</code>:<figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml </a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">baidu_analytics:</span> <span class="number">8006843039519956000</span></div></pre></td></tr></table></figure></li></ol><blockquote><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p></blockquote><h4 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h4><figure class="highlight yml"><figcaption><span>主题_config.yml</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml" target="_blank" rel="external">themes/BlueLake/_config.yml</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p><h4 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/" target="_blank" rel="external">微博开放平台</a>获取您自己的微博秀代码来替换。</p><ol><li>登录<a href="http://open.weibo.com/" target="_blank" rel="external">微博开放平台</a>，选择微博秀。</li><li>为了与主题风格统一，作如下配置<ul><li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li><li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li><li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li></ul></li><li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code><figure class="highlight stylus"><figcaption><span>weibo.jade</span><a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade" target="_blank" rel="external">layout/_widget/weibo.jade</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line marked">.widget</div><div class="line">  .widget-title</div><div class="line">    i(class=<span class="string">'fa fa-weibo'</span>)= <span class="string">' '</span> + __(<span class="string">'新浪微博'</span>)</div><div class="line">  iframe(<span class="attribute">width</span>=<span class="string">"100%"</span>,height=<span class="string">"400"</span>,class=<span class="string">"share_self"</span>,frameborder=<span class="string">"0"</span>,scrolling=<span class="string">"no"</span>,src=<span class="string">"http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1"</span>)</div></pre></td></tr></table></figure>这只是为了和主题的风格统一，当然您也可以自由随意发挥。<blockquote><p>注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.htm
      
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://zm8.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://zm8.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo3.2+GitHub搭建静态博客(转)</title>
    <link href="https://zm8.github.io/2017/09/28/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2(%E8%BD%AC)/"/>
    <id>https://zm8.github.io/2017/09/28/Hexo3-2-github搭建静态博客(转)/</id>
    <published>2017-09-27T23:24:00.000Z</published>
    <updated>2017-09-28T05:44:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://chaoo.oschina.io/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="external"><b style="color:red">原文链接</b></a></p><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>在安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>之前，必须确认你已经安装了<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>和<a href="http://git-scm.com/" target="_blank" rel="external">Git</a>。<br><a id="more"></a> </p><h4 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1.创建GitHub仓库"></a>1.创建GitHub仓库</h4><p>注册<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号，创建一个以”用户名.github.io”命名的仓库，如我的用户名为chaooo,那我的仓库名为：<a href="https://github.com/chaooo/chaooo.github.io" target="_blank" rel="external">chaooo.github.io</a>，仓库默有master分支，用于托管生成的静态文件，再新建一个develop(名字自定)分支，用于托管后台文件，方便以后换电脑时后台文件不会丢失。</p><h4 id="2-配置Git"><a href="#2-配置Git" class="headerlink" title="2.配置Git"></a>2.配置Git</h4><p>设置Git的用户名和邮件地址（邮箱就是你注册Github时候的邮箱），打开Git Bash,键入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"username"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure></p><h4 id="3-本地Git与GitHub建立联系"><a href="#3-本地Git与GitHub建立联系" class="headerlink" title="3.本地Git与GitHub建立联系"></a>3.本地Git与GitHub建立联系</h4><p>这里介绍SSH的配置，先检查电脑是否已经有SSH<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -al ~/.ssh</div></pre></td></tr></table></figure></p><p>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件。<br>输入以下指令后，一路回车就好：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"emailt@example.com"</span></div></pre></td></tr></table></figure></p><p>然后键入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent -s</div><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>如果出现这个错误:<code>Could not open a connection to your authentication agent</code>，则先执行如下命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-agent bash</div></pre></td></tr></table></figure></p><p>再重新输入指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p><p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p><p>在github上点击你的头像–&gt;Your profile–&gt;Edit profile–&gt;SSH and GPG keys–&gt;New SSH key<br>Title自己随便取，然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开id_rsa.pub复制其内容），最后Add SSH key。<br>最后还是测试一下吧，键入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p><p>你可能会看到有警告，没事，输入“yes”就好。</p><h4 id="4-初始化hexo文件夹"><a href="#4-初始化hexo文件夹" class="headerlink" title="4.初始化hexo文件夹"></a>4.初始化hexo文件夹</h4><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址。<br>在E盘或是你喜爱的文件夹下，右键Git Bash Here: 键入git clone -b develop &lt;刚复制的地址&gt;<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div><div class="line">$ mkdir Hexo-admin</div></pre></td></tr></table></figure></p><h3 id="Hexo安装配置"><a href="#Hexo安装配置" class="headerlink" title="Hexo安装配置"></a>Hexo安装配置</h3><h4 id="1-Hexo初始化"><a href="#1-Hexo初始化" class="headerlink" title="1.Hexo初始化"></a>1.Hexo初始化</h4><p>进入Hexo-admin文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> Hexo-admin</div></pre></td></tr></table></figure></p><p>接下来只需要使用 npm 即可完成 Hexo 的安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p><p>接下来也可以本地预览博客，执行下列命令,然后到浏览器输入localhost:4000看看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo server</div></pre></td></tr></table></figure></p><p>输入Ctrl+C停止服务。</p><h4 id="2-Hexo配置"><a href="#2-Hexo配置" class="headerlink" title="2.Hexo配置"></a>2.Hexo配置</h4><p>用编辑器打开 Hexo-admin/ 下的配置文件_config.yml找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: </div><div class="line">  repository:</div></pre></td></tr></table></figure></p><p>到GitHub的chaooo.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><h4 id="3-完成部署"><a href="#3-完成部署" class="headerlink" title="3.完成部署"></a>3.完成部署</h4><p>最后一步，快要成功了，键入指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p><p>输入弹出框的用户名与密码(首次使用git会弹出)。<br>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的Repository名），例如我的：<a href="http://chaooo.github.io/" target="_blank" rel="external">chaooo.github.io/</a><br>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行最后两句大概是这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">To https://github.com/chaooo/chaooo.github.io.git</div><div class="line">   7f3b50a..128a10d  HEAD -&gt; master</div><div class="line">INFO  Deploy <span class="keyword">done</span>: git</div></pre></td></tr></table></figure></p><p>当然，不要忘了回退到父文件夹提交网站相关的文件以备今后迁移，依次执行git add .、git commit -m “…”、git push origin develop。</p><h3 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h3><h4 id="1-写文章"><a href="#1-写文章" class="headerlink" title="1.写文章"></a>1.写文章</h4><p>执行new命令，生成指定名称的文章至 Admin-blog\source_posts\文章标题.md 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] <span class="string">"文章标题"</span> <span class="comment">#新建文章</span></div></pre></td></tr></table></figure></p><p>然后用编辑器打开“文章标题.md”按照<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown语法</a>书写文章。<br> 其中layout是可选参数，默认值为post。到 scaffolds 目录下查看现有的layout。当然你可以添加自己的layout，<br> 同时你也可以编辑现有的layout，比如post的layout默认是 hexo\scaffolds\post.md<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &#123; &#123; title &#125; &#125;</div><div class="line">date: &#123; &#123; date &#125; &#125;</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p><p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: &#123; &#123; title &#125; &#125;</div><div class="line">date: &#123; &#123; date &#125; &#125;</div><div class="line">categories:</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p><p>文件标题也是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围。<br><code>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示；所有文件&quot;：&quot;后面都必须有个空格，不然会报错。</code></p><h4 id="2-提交"><a href="#2-提交" class="headerlink" title="2.提交"></a>2.提交</h4><p>每次在本地对博客进行修改后，先执行下列命令提交网站相关的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"..."</span></div><div class="line">$ git push origin develop</div></pre></td></tr></table></figure></p><p>然后才执行hexo generate -d发布网站到master分支上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate -d</div></pre></td></tr></table></figure></p><h4 id="3-本地仓库丢失"><a href="#3-本地仓库丢失" class="headerlink" title="3.本地仓库丢失"></a>3.本地仓库丢失</h4><p>当你想在其他电脑工作，或电脑重装系统后，安装Git与Node.js后，可以使用下列步骤：</p><h5 id="3-1拷贝仓库"><a href="#3-1拷贝仓库" class="headerlink" title="3.1拷贝仓库"></a>3.1拷贝仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> -b develop https://github.com/chaooo/chaooo.github.io.git</div></pre></td></tr></table></figure><h5 id="3-2配置Hexo"><a href="#3-2配置Hexo" class="headerlink" title="3.2配置Hexo"></a>3.2配置Hexo</h5><p>在本地新拷贝的chaooo.github.io文件夹下通过Git bash依次执行下列指令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ npm install hexo</div><div class="line">$ npm install</div><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p><h5 id="小Tips-hexo-命令"><a href="#小Tips-hexo-命令" class="headerlink" title="小Tips:hexo 命令"></a>小Tips:hexo 命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></div><div class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></div><div class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></div><div class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></div><div class="line">hexo version  <span class="comment">#查看Hexo的版本</span></div><div class="line">hexo deploy -g  <span class="comment">#生成加部署</span></div><div class="line">hexo server -g  <span class="comment">#生成加预览</span></div><div class="line"><span class="comment">#命令的简写</span></div><div class="line">hexo n == hexo new</div><div class="line">hexo g == hexo generate</div><div class="line">hexo s == hexo server</div><div class="line">hexo d == hexo deploy</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://chaoo.oschina.io/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;b style=&quot;color:red&quot;&gt;原文链接&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h3&gt;&lt;p&gt;在安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;之前，必须确认你已经安装了&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;和&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://zm8.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://zm8.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>github博客迁移(转)</title>
    <link href="https://zm8.github.io/2017/09/28/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB(%E8%BD%AC)/"/>
    <id>https://zm8.github.io/2017/09/28/github博客迁移(转)/</id>
    <published>2017-09-27T23:24:00.000Z</published>
    <updated>2017-09-28T05:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://chaoo.oschina.io/2016/08/17/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB.html" target="_blank" rel="external"><b style="color:red">原文链接</b></a></p><p>由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。</p><h3 id="1-迁移代码"><a href="#1-迁移代码" class="headerlink" title="1.迁移代码"></a>1.迁移代码</h3><p>把代码从<a href="https://github.com/" target="_blank" rel="external">github</a>迁移至<a href="http://git.oschina.net/" target="_blank" rel="external">码云（oschina）</a>。<br>首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。<br>码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。<br><a id="more"></a><br>在GitHub上，可以新建一个以<code>用户名</code>命名的仓库，将网站代码放在master分支下，即可自动部署到：<code>http://用户名.github.io/</code>，若其他命名的仓库则新建一个<code>gh-pages</code>的分支，网站代码放在<code>gh-pages</code>下，，即可自动部署到：<code>http://用户名.github.io/仓库名/</code>。<br>对于码云，基本和GitHub一样，不过还需要手动开启Pages服务，而且其他仓库虽然默认在<code>osc-pages</code>下，但可自定到自己喜欢的分支上。<br>代码迁移步骤如下：</p><h5 id="1-1-新建码云项目"><a href="#1-1-新建码云项目" class="headerlink" title="1.1 新建码云项目"></a>1.1 新建码云项目</h5><p>以我自己的博客为例，项目地址：<a href="https://github.com/chaooo/chaooo.github.io.git" target="_blank" rel="external">https://github.com/chaooo/chaooo.github.io.git</a>。<br>它在Github上的Pages地址是：<a href="http://chaooo.github.io" target="_blank" rel="external">http://chaooo.github.io</a><br>如果想把它转移到码云Pages，只需要登录你的码云账户，点击右上角的<code>+</code>号，选择新建项目:<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina.jpg" alt="博客迁移至码云1"></p><h5 id="1-2-开启pages服务"><a href="#1-2-开启pages服务" class="headerlink" title="1.2 开启pages服务"></a>1.2 开启pages服务</h5><p>然后点击创建，项目会在后台自动导入，导入成功后，点击菜单栏的<code>Pages</code>,码云默认的Pages服务分支是osc-pages，但是你也已选择自己静态页面所在的分支，这里我的博客项目的静态页面分支是master，选择master并点击启动服务。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina1.jpg" alt="博客迁移至码云2"><br>至此，博客已经部署成功，访问提供的地址：<a href="http://chaoo.oschina.io" target="_blank" rel="external">http://chaoo.oschina.io</a>即可查看到我的博客。<br><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina2.jpg" alt="博客迁移至码云3"></p><h3 id="2-修改hexo配置"><a href="#2-修改hexo配置" class="headerlink" title="2.修改hexo配置"></a>2.修改hexo配置</h3><p>打开博客根目录的_config.yml文件，找到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line">url: http://chaooo.github.io</div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/chaooo/chaooo.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>修改为(根据自己的仓库地址修改)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># URL</span></div><div class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class="line"><span class="comment">#url: http://chaooo.github.io</span></div><div class="line">url: http://chaoo.oschina.io</div><div class="line"></div><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line"><span class="comment">#- type: git</span></div><div class="line"><span class="comment">#  repository: https://github.com/chaooo/chaooo.github.io.git</span></div><div class="line"><span class="comment">#  branch: master</span></div><div class="line">- <span class="built_in">type</span>: git</div><div class="line">  repository: https://git.oschina.net/chaoo/chaoo.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>然后执行下面命令，以重新生成<code>baidusitemap.xml</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate -d</div></pre></td></tr></table></figure></p><h4 id="3-验证网站"><a href="#3-验证网站" class="headerlink" title="3.验证网站"></a>3.验证网站</h4><p>百度搜索引擎入口：<br><a href="http://zhanzhang.baidu.com/linksubmit/url" target="_blank" rel="external">百度搜索引擎入口</a>。<br>先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的<code>public/</code>下面 。<br>然后部署到服务器,输入地址：<code>http://chaoo.oschina.io/baidu_verify_wjJ25Q3cv2.html</code>能访问到就可以点验证按钮(按照百度的引导步骤就好)。</p><h3 id="4-sitemap提交"><a href="#4-sitemap提交" class="headerlink" title="4.sitemap提交"></a>4.sitemap提交</h3><p>直接点击<code>sitemap</code>填写数据文件地址：<code>http://chaoo.oschina.io/baidusitemap.xml</code>,输入验证码提交。</p><h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度，可将代码添加到<code>\themes\landscape\layout\_partial\after_footer.ejs</code>中的最下面就行。<br>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</div><div class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><p>这样就可以等待百度收录了。</p><p><img src="http://obzf7z93c.bkt.clouddn.com/blog/oschina3.jpg" alt="博客迁移至码云4"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://chaoo.oschina.io/2016/08/17/github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;b style=&quot;color:red&quot;&gt;原文链接&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于github博客在国内访问非常慢而且经常不稳定，百度爬虫也无法抓取github博客内容，所以决定将博客迁移至码云。&lt;/p&gt;
&lt;h3 id=&quot;1-迁移代码&quot;&gt;&lt;a href=&quot;#1-迁移代码&quot; class=&quot;headerlink&quot; title=&quot;1.迁移代码&quot;&gt;&lt;/a&gt;1.迁移代码&lt;/h3&gt;&lt;p&gt;把代码从&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;迁移至&lt;a href=&quot;http://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;码云（oschina）&lt;/a&gt;。&lt;br&gt;首先，你要先在码云注册一个账号，和GitHub操作基本一样，这里不再赘述。&lt;br&gt;码云的Pages服务基本和GitHub的一样，不过码云的Pages服务更灵活一些。&lt;br&gt;
    
    </summary>
    
      <category term="hexo博客折腾" scheme="https://zm8.github.io/categories/hexo%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://zm8.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
